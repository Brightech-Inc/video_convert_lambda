name: Deploy Video Converter Lambda

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-northeast-1
  STACK_NAME: video-converter-lambda

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy initial ECR stack (if needed)
        id: deploy-ecr
        run: |
          # ECRリポジトリのみを先にデプロイ
          aws cloudformation deploy \
            --template-file cloudformation/initial-deploy.yaml \
            --stack-name ${{ env.STACK_NAME }}-ecr-${{ github.event.inputs.environment || 'dev' }} \
            --parameter-overrides Environment=${{ github.event.inputs.environment || 'dev' }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          
          # ECR URIを取得
          ECR_URI=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-ecr-${{ github.event.inputs.environment || 'dev' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryUri`].OutputValue' \
            --output text)
          echo "ECR_REPOSITORY=$ECR_URI" >> $GITHUB_OUTPUT

      - name: Download FFmpeg binary
        run: |
          mkdir -p bin
          curl -L "https://github.com/eugeneware/ffmpeg-static/releases/latest/download/linux-x64" -o bin/ffmpeg
          chmod +x bin/ffmpeg

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY: ${{ steps.deploy-ecr.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REPOSITORY:latest

      - name: Check and cleanup failed stack
        run: |
          # スタックの状態を確認
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }} \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "NOT_EXISTS")
          
          echo "Current stack status: $STACK_STATUS"
          
          # ROLLBACK_COMPLETE状態の場合は削除
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting failed stack..."
            aws cloudformation delete-stack \
              --stack-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }}
            
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete \
              --stack-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }}
            
            echo "Stack deletion completed"
          fi

      - name: Deploy CloudFormation stack
        run: |
          # メインスタックのデプロイ（Lambda関数含む）
          aws cloudformation deploy \
            --template-file cloudformation/template.yaml \
            --stack-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }} \
            --parameter-overrides Environment=${{ github.event.inputs.environment || 'dev' }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Update Lambda function with container image
        run: |
          # 環境変数を取得
          ENV_VARS=$(aws lambda get-function-configuration \
            --function-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }}-video-converter \
            --query 'Environment.Variables' \
            --output json)
          
          # Lambda関数をコンテナイメージで置き換え
          aws lambda update-function-code \
            --function-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }}-video-converter \
            --image-uri ${{ steps.deploy-ecr.outputs.ECR_REPOSITORY }}:${{ github.sha }} || \
          {
            echo "Zip to Image conversion required. Updating function configuration..."
            
            # 関数の設定を取得
            ROLE_ARN=$(aws lambda get-function-configuration \
              --function-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }}-video-converter \
              --query 'Role' \
              --output text)
            
            # ZipファイルでLambda関数を一時的に作成
            echo 'def lambda_handler(event, context): return {"statusCode": 200}' > /tmp/temp_lambda.py
            zip /tmp/temp_lambda.zip /tmp/temp_lambda.py
            
            # 設定をリセット
            aws lambda update-function-configuration \
              --function-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }}-video-converter \
              --timeout 900 \
              --memory-size 3008
            
            # コンテナイメージでコードを更新
            aws lambda update-function-code \
              --function-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }}-video-converter \
              --image-uri ${{ steps.deploy-ecr.outputs.ECR_REPOSITORY }}:${{ github.sha }}
          }

      - name: Get API endpoint
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-${{ github.event.inputs.environment || 'dev' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          echo "API Endpoint: $API_ENDPOINT"